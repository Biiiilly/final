import Final.Nonarchimedean
import Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics
import Mathlib.NumberTheory.Padics.PadicNorm
import Mathlib.Analysis.SpecialFunctions.Log.Base


/-!
# Ostrowski's theorem for ‚Ñö

## References
* https://kconrad.math.uconn.edu/blurbs/gradnumthy/ostrowskinumbfield.pdf
* https://proofwiki.org/wiki/Ostrowski%27s_Theorem

-/

open scoped BigOperators

section Real

/-- The usual absolute value on ‚Ñö. -/
def MulRingNorm.Real : MulRingNorm ‚Ñö :=
{ toFun     := Œª x : ‚Ñö ‚Ü¶ |x|
  map_zero' := by simp only [Rat.cast_zero, abs_zero]
  add_le'   := norm_add_le
  neg'      := norm_neg
  eq_zero_of_map_eq_zero' := by simp only [abs_eq_zero, Rat.cast_eq_zero, imp_self, forall_const]
  map_one' := by simp [algebraMap.coe_one, abs_one]
  map_mul' := by exact fun x y => Rat.normedField.proof_21 x y
}

@[simp] lemma MulRingNorm_eq_abs (r : ‚Ñö) : MulRingNorm.Real r = |r| := by simp only [Rat.cast_abs]; rfl

end Real

section padic

/-- The p-adic norm on ‚Ñö. -/
def MulRingNorm.padic (p : ‚Ñï) [hp : Fact (Nat.Prime p)] : MulRingNorm ‚Ñö :=
{ toFun    := Œª x : ‚Ñö ‚Ü¶ (padicNorm p x: ‚Ñù)
  map_zero' := by simp only [padicNorm.zero, Rat.cast_zero]
  add_le'   := by
    simp only
    norm_cast
    exact padicNorm.triangle_ineq
  neg'      := by simp only [padicNorm.neg, eq_self_iff_true, forall_const]
  eq_zero_of_map_eq_zero' := by
    simp only
    norm_cast
    exact @padicNorm.zero_of_padicNorm_eq_zero p _
  map_one' := by simp only [ne_eq, one_ne_zero, not_false_eq_true, padicNorm.eq_zpow_of_nonzero,
    padicValRat.one, neg_zero, zpow_zero, Rat.cast_one]
  map_mul' := by simp only [padicNorm.mul, Rat.cast_mul, eq_self_iff_true, forall_const]
}

@[simp] lemma MulRingNorm_eq_padicNorm (p : ‚Ñï) [Fact (Nat.Prime p)] (r : ‚Ñö) :
  MulRingNorm.padic p r = padicNorm p r := rfl

lemma MulRingNorm.padic_nonarchimedean (p : ‚Ñï) [hp : Fact (Nat.Prime p)] :
    Nonarchimedean (@MulRingNorm.padic p hp) := by
  simp only [Nonarchimedean_def, MulRingNorm_eq_padicNorm]
  exact_mod_cast @padicNorm.nonarchimedean p _

end padic

variable {f : MulRingNorm ‚Ñö}

section non_archimedean

-- Show that ùîû is an ideal
def ùîû (harc : Nonarchimedean f) : Ideal ‚Ñ§ :=
{ carrier := {a : ‚Ñ§ | f a < 1},
  add_mem' := @Œª a b ha hb ‚Ü¶ by simp only [Set.mem_setOf_eq, Int.cast_add] at ha hb ‚ä¢; linarith [(harc a b), (max_lt ha hb)],
  zero_mem' := by simp only [Set.mem_setOf_eq, Int.cast_zero, map_zero, zero_lt_one],
  smul_mem' := @Œª a b hb ‚Ü¶ by
    simp only [smul_eq_mul, Set.mem_setOf_eq, Int.cast_mul, map_mul]
    simp only [Set.mem_setOf_eq] at hb
    exact Right.mul_lt_one_of_le_of_lt_of_nonneg (int_norm_le_one a harc) hb (apply_nonneg f ‚Üëb) }

lemma a_proper (harc : Nonarchimedean f) : ùîû harc ‚â† (‚ä§ : Ideal ‚Ñ§) := by
  rw [Ideal.ne_top_iff_one]
  dsimp only [ùîû, Submodule.mem_mk, Set.mem_setOf_eq, Int.cast_one, not_lt]
  simp only [Submodule.mem_mk, AddSubmonoid.mem_mk, AddSubsemigroup.mem_mk, Set.mem_setOf_eq,
    Int.cast_one, map_one, lt_self_iff_false, not_false_eq_true]

-- Show that it contains pZ
lemma a_contains_primeIdeal (harc : Nonarchimedean f) (h_nontriv : f ‚â† 1) :
    ‚àÉ (p : ‚Ñï), Fact (Nat.Prime p) ‚àß ùîû harc ‚â• Ideal.span {(p : ‚Ñ§)} := by
  obtain ‚ü®p, hp, hbound‚ü© := ex_prime_norm_lt_one harc h_nontriv
  refine ‚ü®p, hp, ?_‚ü©
  apply Ideal.span_le.mpr
  simp only [Set.singleton_subset_iff, SetLike.mem_coe]
  exact hbound

-- Show that it's in Fact equal to pZ (since pZ is a maximal ideal)
lemma a_eq_primeIdeal (harc : Nonarchimedean f) (h_nontriv : f ‚â† 1) :
    ‚àÉ (p : ‚Ñï), Fact (Nat.Prime p) ‚àß ùîû harc = Ideal.span {(p : ‚Ñ§)} := by
  obtain ‚ü®p, hp, hinc‚ü© := a_contains_primeIdeal harc h_nontriv
  refine ‚ü®p, hp, ((PrincipalIdealRing.isMaximal_of_irreducible
    (Nat.prime_iff_prime_int.mp hp.1).irreducible).eq_of_le (a_proper harc) hinc).symm‚ü©

-- the equality at the end of the next lemma
lemma rearrange {p v : ‚Ñù} (m : ‚Ñï) (hp : p > 0) (hlogp : Real.log p ‚â† 0) (hv : v > 0) :
    v ^ m = (p ^ m)‚Åª¬π ^ (-Real.log v / Real.log p) := by
  have : p ^ m = p ^ (m : ‚Ñù) := by norm_cast
  rw [‚Üê Real.rpow_neg_one, this, ‚Üê (Real.rpow_mul (le_of_lt hp)),
    ‚Üê (Real.rpow_mul (le_of_lt hp)), neg_div, mul_neg, mul_neg, mul_one, neg_mul, neg_neg,
      mul_div, ‚Üê Real.log_rpow hv, Real.rpow_def_of_pos hp, mul_div_left_comm,
        div_self hlogp, mul_one, Real.exp_log]
  ¬∑ norm_cast
  ¬∑ norm_cast
    exact pow_pos hv m

-- f a = (f p)^m = ring_norm a
lemma int_val_eq (harc : Nonarchimedean f) (h_nontriv : f ‚â† 1) :
    ‚àÉ (p : ‚Ñï) (hp : Fact (Nat.Prime p)) (s : ‚Ñù) (_ : s > 0),
      ‚àÄ (a : ‚Ñ§), f a = (@MulRingNorm.padic p hp a)^s := by
  obtain ‚ü®p, hp, h_aeq‚ü© := a_eq_primeIdeal harc h_nontriv
  let hp‚ÇÄ := hp
  refine ‚ü®p, hp, ?_‚ü©
  cases' hp with hp
  have fpgt0 := map_pos_of_ne_zero f (Nat.cast_ne_zero.mpr (ne_of_gt hp.pos))
  let s := (- Real.log (f p : ‚Ñù) / Real.log p)
  have hs : s > 0
  ¬∑ refine div_pos ?_ (@Real.log_pos p (by exact_mod_cast hp.one_lt))
    ¬∑ refine neg_pos.mpr ((Real.log_neg_iff fpgt0).mpr ?_)
      have p_mem_a : (p : ‚Ñ§) ‚àà Ideal.span ({(p : ‚Ñ§)} : Set ‚Ñ§) := by rw [Ideal.mem_span_singleton]
      rw [‚Üê h_aeq] at p_mem_a
      exact p_mem_a
  refine ‚ü®s, hs, ?_‚ü©
  intro a
  by_cases ha : a = 0
  ¬∑ simp_rw [ha, Int.cast_zero, map_zero]
    symm
    apply (Real.zero_rpow)
    linarith
  obtain ‚ü®b, hapb, hndiv‚ü© := multiplicity.exists_eq_pow_mul_and_not_dvd ((@padicValRat.finite_int_prime_iff _ hp‚ÇÄ _).2 ha)
  let m := (multiplicity (p : ‚Ñ§) a).get ((@padicValRat.finite_int_prime_iff _ hp‚ÇÄ _).2 ha)
  have : f a = (f p) ^ m
  ¬∑ rw [hapb]
    have hb : b ‚àâ ùîû harc
    ¬∑ rw [h_aeq]
      intro hmem
      obtain ‚ü®k, hk‚ü© := Ideal.mem_span_singleton'.1 hmem
      apply hndiv
      rw [dvd_iff_exists_eq_mul_left]
      refine ‚ü®k, hk.symm‚ü©
    dsimp only [ùîû] at hb
    simp only [Int.cast_id, Submodule.mem_mk, Set.mem_setOf_eq, not_lt] at hb
    suffices h'' : f ((p : ‚Ñö) ^ m * (b : ‚Ñö)) = (f (p : ‚Ñö)) ^ m
    ¬∑ convert h''
      norm_cast
    simp only [AddSubmonoid.mem_mk, AddSubsemigroup.mem_mk, Set.mem_setOf_eq, not_lt] at hb
    rw [f_mul_eq, le_antisymm (int_norm_le_one b harc) hb, mul_one, map_pow]
  rw [this]
  simp only [MulRingNorm_eq_padicNorm, ne_eq, Int.cast_eq_zero, ha, not_false_eq_true,
    padicNorm.eq_zpow_of_nonzero, padicValRat.of_int, zpow_neg, zpow_coe_nat, Rat.cast_inv,
    Rat.cast_pow, Rat.cast_coe_nat]
  unfold padicValInt padicValNat
  simp [ha, hp.ne_one, Int.natAbs_pos.2 ha, multiplicity.Int.natAbs p a]
  have hppos : (p : ‚Ñù) > 0 := Nat.cast_pos.mpr (hp.pos)
  apply rearrange m hppos _ fpgt0
  rw [Real.log_ne_zero]
  have goal : 2 ‚â§ (p : ‚Ñù)
  ¬∑ norm_cast
    exact Nat.Prime.two_le hp
  constructor
  ¬∑ linarith
  ¬∑ constructor
    ¬∑ linarith
    ¬∑ linarith

-- Extend this to ‚Ñö using div_eq
lemma rat_val_eq (harc : Nonarchimedean f) (h_nontriv : f ‚â† 1) :
    ‚àÉ (p : ‚Ñï) (hp : Fact (Nat.Prime p)) (s : ‚Ñù) (_ : s > 0),
      ‚àÄ (a : ‚Ñö), f a = (@MulRingNorm.padic p hp a) ^ s := by
  obtain ‚ü®p, hp, s, hs, h_int‚ü© := int_val_eq harc h_nontriv
  refine ‚ü®p, hp, s, hs, ?_‚ü©
  intro a
  by_cases ha : a = 0
  ¬∑ rw [ha, map_zero, map_zero]
    have hs' : s ‚â† 0 := by linarith
    exact (Real.zero_rpow hs').symm
  have hcast : f (a.den) = (@MulRingNorm.padic p hp a.den) ^ s := h_int a.den
  rw [‚Üê Rat.num_div_den a, map_div‚ÇÄ, h_int, hcast]
  simp only [ha, MulRingNorm_eq_padicNorm, Rat.num_div_den, padicNorm.eq_zpow_of_nonzero,
    Ne.def, not_false_iff, zpow_neg, Rat.cast_inv, Rat.cast_zpow, Rat.cast_coe_nat]
  unfold padicValRat
  rw [(Real.rpow_int_cast _ _).symm]
  push_cast
  rw [Real.rpow_sub]
  unfold padicNorm
  simp only [Int.cast_eq_zero, Rat.num_ne_zero_of_ne_zero ha, ‚ÜìreduceIte, padicValRat.of_int,
    zpow_neg, zpow_coe_nat, Rat.cast_inv, Rat.cast_pow, Rat.cast_coe_nat, Nat.cast_eq_zero,
    Rat.den_nz a, padicValRat.of_nat, Int.cast_ofNat, Real.rpow_nat_cast, inv_div]
  rw [Real.inv_rpow, Real.inv_rpow]
  simp only [inv_div_inv]
  rw [‚Üê Real.div_rpow]
  repeat
    rw [(Real.rpow_nat_cast _ _).symm]
    exact Real.rpow_nonneg (le_of_lt (Nat.cast_pos.mpr hp.1.pos)) _
  exact (Nat.cast_pos.mpr hp.1.pos)

-- Finish: hence f and padic are equivalent
lemma f_equiv_padic (harc : Nonarchimedean f) (h_nontriv : f ‚â† 1) :
    ‚àÉ (p : ‚Ñï) (hp : Fact (Nat.Prime p)), MulRingNorm.equiv f (@MulRingNorm.padic p hp) := by
  obtain ‚ü®p, hp, s, hs, h‚ü© := rat_val_eq harc h_nontriv
  refine ‚ü®p, hp, 1 / s, ?_‚ü©
  refine ‚ü®one_div_pos.mpr hs, ?_‚ü©
  ext a
  rw [h, ‚ÜêReal.rpow_mul]
  simp only [MulRingNorm_eq_padicNorm, one_div, ne_eq, Ne.symm (ne_of_lt hs), not_false_eq_true,
    mul_inv_cancel, Real.rpow_one]
  unfold MulRingNorm.padic
  simp only [apply_nonneg]

end non_archimedean

section archimedean

lemma map_sum_le {R : Type*} [Ring R] (f : MulRingNorm R) (n : ‚Ñï) {Œπ : ‚Ñï ‚Üí R} :
    f (‚àë i in Finset.range n, Œπ i) ‚â§ ‚àë i in Finset.range n, f (Œπ i) := by
  induction' n with n hn
  ¬∑ simp only [Nat.zero_eq, Finset.range_zero, Finset.sum_empty, map_zero, le_refl]
  ¬∑ rw [Finset.sum_range_succ, Finset.sum_range_succ]
    calc
      f (‚àë x in Finset.range n, Œπ x + Œπ n) ‚â§
        f (‚àë i in Finset.range n, Œπ i) + f (Œπ n) := by exact map_add_le_add f (‚àë x in Finset.range n, Œπ x) (Œπ n)
                                        _  ‚â§ (‚àë i in Finset.range n, f (Œπ i)) + f (Œπ n) := add_le_add_right hn _

lemma map_sum_le' (n : ‚Ñï) (Œπ : Finset.Iio n ‚Üí ‚Ñö) :
    f (‚àë i : Finset.Iio n, Œπ i) ‚â§ ‚àë i : Finset.Iio n, f (Œπ i) := by
  simp only [Finset.univ_eq_attach]
  refine Finset.le_sum_of_subadditive ‚áëf ?h_one ?h_mul (Finset.attach (Finset.Iio n)) fun i => Œπ i
  ¬∑ exact map_zero f
  ¬∑ exact fun x y => map_add_le_add f x y

--First limit
lemma limit1 {N : ‚Ñù} (hN : 0 < N) : Filter.Tendsto (Œª n : ‚Ñï ‚Ü¶ N ^ (1 / (n : ‚Ñù))) Filter.atTop (nhds 1) := by
  rw [‚ÜêReal.exp_log hN]
  simp_rw [‚ÜêReal.exp_mul]
  refine Real.tendsto_exp_nhds_zero_nhds_one.comp ?_
  simp_rw [mul_one_div]
  apply tendsto_const_div_atTop_nhds_zero_nat

--Second limit
lemma limit2 (c : ‚Ñù) (hc : 0 < c) : Filter.Tendsto (Œª n : ‚Ñï ‚Ü¶ (1 + (n : ‚Ñù) * c) ^ (1 / (n : ‚Ñù))) Filter.atTop (nhds 1) := by
  have : (Œª n : ‚Ñï ‚Ü¶ (1+(n : ‚Ñù)*c)^(1 / (n : ‚Ñù)))
    = (Œª (x : ‚Ñù) ‚Ü¶ x ^ (1 / ((1 / c) * x  + (- 1) / c))) ‚àò (Œª y : ‚Ñù ‚Ü¶ 1 + c*y) ‚àò (@Nat.cast ‚Ñù Real.natCast)
  ¬∑ ext n
    simp only [one_div, Function.comp_apply]
    rw [mul_add, ‚Üêmul_assoc, mul_one, div_eq_mul_inv, add_comm c‚Åª¬π, add_assoc, neg_mul, one_mul,
      add_right_neg, add_zero, inv_mul_cancel (ne_of_gt hc), one_mul, mul_comm]
  rw [this]
  refine (tendsto_rpow_div_mul_add 1 (1 / c) (-1 / c) (one_div_ne_zero (ne_of_gt hc)).symm).comp ?_
  have goal : Filter.Tendsto (Œª y : ‚Ñù ‚Ü¶ 1 + c*y) Filter.atTop Filter.atTop
  ¬∑ apply Filter.tendsto_atTop_add_const_left
    apply Filter.Tendsto.const_mul_atTop hc
    intros _ hx
    exact hx
  refine Filter.Tendsto.comp goal ?_
  exact tendsto_nat_cast_atTop_atTop

lemma pow_mul_pow_le_max_pow {a b : ‚Ñù} {m n : ‚Ñï} (ha : 0 ‚â§ a) (hb : 0 ‚â§ b) : a ^ m * b ^ n ‚â§ max a b ^ (m + n) := by
  rw [pow_add]
  apply mul_le_mul
  ¬∑ exact pow_le_pow_left ha (le_max_left a b) m
  ¬∑ exact pow_le_pow_left hb (le_max_right a b) n
  ¬∑ exact pow_nonneg hb n
  ¬∑ apply pow_nonneg
    rw [le_max_iff]
    left
    exact ha

lemma inter_ineq {n : ‚Ñï} (x y : ‚Ñö) (hf : ‚àÄ m : ‚Ñï, f m ‚â§ 1) :
    f (x + y) ^ (n : ‚Ñù) ‚â§ (n + 1 : ‚Ñù) * max (f x) (f y) ^ n := by
  norm_cast
  rw [‚Üê map_pow, add_pow]
  apply le_trans (map_sum_le f (n + 1))
  suffices goal_1 : ‚àë i in Finset.range (n + 1), f (x ^ i * y ^ (n - i) * (n.choose i))
    = ‚àë i in Finset.range (n + 1), f (x ^ i) * f (y ^ (n - i)) * f (n.choose i)
  ¬∑ rw [goal_1]
    calc
      ‚àë i in Finset.range (n + 1), f (x ^ i) * f (y ^ (n - i)) * f (n.choose i)
        ‚â§ ‚àë i in Finset.range (n + 1), f (x ^ i) * f (y ^ (n - i)) :=
          by
            apply Finset.sum_le_sum
            intros i _
            conv =>
              rhs
              rw [‚Üêmul_one (f (x ^ i) * f (y ^ (n - i)))]
            exact mul_le_mul_of_nonneg_left (hf _) (mul_nonneg (apply_nonneg f _) (apply_nonneg f _))
      _ ‚â§ ‚àë i in Finset.range (n + 1), max (f x) (f y) ^ n :=
          by
            apply Finset.sum_le_sum
            intros i hi
            have : i + (n - i) = n
            ¬∑ rw [add_comm]
              apply Nat.sub_add_cancel
              simp at hi
              linarith
            conv =>
              rhs
              rw [‚Üêthis]
            repeat
              rw [map_pow]
            exact pow_mul_pow_le_max_pow (apply_nonneg f x) (apply_nonneg f y)
      _ = ‚Üë(n + 1) * max (f x) (f y) ^ n := by simp
  ¬∑ congr
    ext
    rw [f_mul_eq, f_mul_eq]

lemma root_ineq {n : ‚Ñï} (x y : ‚Ñö) (hn : n ‚â† 0) (hf : ‚àÄ m : ‚Ñï, f m ‚â§ 1) :
    f (x + y) ‚â§ (n + 1 : ‚Ñù) ^ (1 / (n : ‚Ñù)) * max (f x) (f y) := by
  refine le_of_pow_le_pow_left hn ?_ ?_
  ¬∑ apply mul_nonneg
    ¬∑ apply Real.rpow_nonneg
      norm_cast
      linarith
    ¬∑ rw [le_max_iff]
      left
      exact apply_nonneg f x
  ¬∑ rw [mul_pow]
    have : 0 ‚â§ (n : ‚Ñù) + 1 := by norm_cast; linarith
    nth_rewrite 2 [‚Üê Real.rpow_nat_cast]
    rw [‚Üê Real.rpow_mul this, one_div, inv_mul_cancel (by norm_cast), Real.rpow_one, ‚ÜêReal.rpow_nat_cast]
    exact inter_ineq x y hf

-- A norm is non-archimedean iff it's bounded on the Naturals
lemma Nonarchimedean_iff_natNorm_bounded : (‚àÄ n : ‚Ñï, f n ‚â§ 1) ‚Üî Nonarchimedean f := by
  constructor
  ¬∑ intros H x y
    have lim : Filter.Tendsto (Œª n : ‚Ñï ‚Ü¶ (n + 1 : ‚Ñù) ^ (1 / (n : ‚Ñù)) * max (f x) (f y)) Filter.atTop (nhds (max (f x) (f y)))
    ¬∑ nth_rewrite 2 [‚Üêone_mul (max (f x) (f y))]
      apply Filter.Tendsto.mul_const (max (f x) (f y))
      suffices goal_1 : (Œª k : ‚Ñï ‚Ü¶ ((k : ‚Ñù) + 1) ^ (1 / (k : ‚Ñù))) = (Œª k : ‚Ñï ‚Ü¶ (1 + (k : ‚Ñù) * 1) ^ (1 / (k : ‚Ñù)))
      ¬∑ rw [goal_1]
        exact limit2 1 (Real.zero_lt_one)
      ¬∑ ext k
        simp only [one_div, mul_one, add_comm]
    apply ge_of_tendsto lim _
    simp only [Filter.eventually_atTop, ge_iff_le]
    use 1
    intros b hb
    exact root_ineq x y (Nat.one_le_iff_ne_zero.mp hb) H
  ¬∑ intros hf n
    exact nat_norm_le_one n hf

lemma aux1 {n‚ÇÄ : ‚Ñï} (hf : ‚àÉ n : ‚Ñï, 1 < f n) (dn‚ÇÄ : n‚ÇÄ = Nat.find hf) : 1 < n‚ÇÄ := by
  have hn‚ÇÄ := Nat.find_spec hf
  rw [‚Üê dn‚ÇÄ] at hn‚ÇÄ
  by_contra
  rw [lt_iff_not_ge] at hn‚ÇÄ
  interval_cases n‚ÇÄ
  ¬∑ apply hn‚ÇÄ
    simp only [Nat.cast_zero, map_zero, ge_iff_le, zero_le_one]
  ¬∑ apply hn‚ÇÄ
    simp only [Nat.cast_one, map_one, ge_iff_le, le_refl]

lemma List.mapIdx_append' {Œ± M : Type*} [AddCommMonoid M] (K L : List Œ±) (f : ‚Ñï ‚Üí Œ± ‚Üí M) :
    (K ++ L).mapIdx f = K.mapIdx f ++ L.mapIdx (Œª i a ‚Ü¶ f (i + K.length) a) := by
  induction' K with a J IH generalizing f
  ¬∑ simp only [List.nil_append, List.length_nil, add_zero]
    exact rfl
  ¬∑ specialize IH (Œª i ‚Ü¶ f (i + 1))
    simp only [List.cons_append, List.mapIdx_cons, IH, add_assoc, List.length]

lemma List.mapIdx_sum_to_finset_sum {Œ≤ A : Type*} [AddCommMonoid A] {f : ‚Ñï ‚Üí Œ≤ ‚Üí A}
  {L : List Œ≤} [Inhabited Œ≤] : (L.mapIdx f).sum = ‚àë i : Finset.Iio L.length,
    f i ((L.nthLe i (Finset.mem_Iio.1 i.2))) := by
  let g := Œª i ‚Ü¶ (f i ((L.get? i).get!))
  have goal : ‚àë i : Finset.Iio L.length, f i ((L.nthLe i (Finset.mem_Iio.1 i.2))) =
    ‚àë i : Finset.Iio L.length, g i
  ¬∑ simp only [Finset.univ_eq_attach]
    apply Finset.sum_congr rfl
    intro x _
    have hx‚ÇÅ := x.2
    simp only [Finset.mem_Iio] at hx‚ÇÅ
    congr
    rw [List.get?_eq_get hx‚ÇÅ]
    rfl
  rw [goal]
  simp only [Finset.univ_eq_attach]
  rw [Finset.sum_attach]
  dsimp only [g]
  refine List.reverseRecOn L ?_ ?_
  ¬∑ simp only [List.mapIdx_nil, List.sum_nil, List.length_nil]
    rfl
  ¬∑ intro M a IH
    simp only [List.mapIdx_append', List.mapIdx_cons, zero_add, List.mapIdx_nil, List.sum_append, IH,
      List.sum_cons, List.sum_nil, add_zero, List.length_append, List.length_singleton, Nat.Iio_eq_range, Finset.sum_range_succ]
    congr 1
    ¬∑ apply Finset.sum_congr rfl
      intro x hx
      congr 2
      rw [Finset.mem_range] at hx
      exact (List.get?_append hx).symm
    ¬∑ simp only [List.get?_concat_length]
      exact rfl

-- This is lemma 4
lemma lemma4 {n‚ÇÄ : ‚Ñï} {Œ± : ‚Ñù} (hf : ‚àÉ n : ‚Ñï, 1 < f n) (dn‚ÇÄ : n‚ÇÄ = Nat.find hf) (dŒ± : Œ± = Real.log (f n‚ÇÄ) / Real.log n‚ÇÄ) :
    ‚àÄ n : ‚Ñï, f n ‚â§ n ^ Œ± := by
  have : f n‚ÇÄ = n‚ÇÄ ^ Œ±
  ¬∑ rw [dŒ±, Real.log_div_log]
    apply Eq.symm
    apply Real.rpow_logb
    ¬∑ norm_cast
      exact lt_trans zero_lt_one (aux1 hf dn‚ÇÄ)
    ¬∑ apply ne_of_gt
      norm_cast
      exact aux1 hf dn‚ÇÄ
    ¬∑ have hn‚ÇÄ := Nat.find_spec hf
      rw [‚Üêdn‚ÇÄ] at hn‚ÇÄ
      exact lt_trans zero_lt_one hn‚ÇÄ
  have hŒ± : 0 < Œ±
  ¬∑ rw [dŒ±]
    apply div_pos
    ¬∑ apply Real.log_pos
      rw [dn‚ÇÄ]
      exact Nat.find_spec hf
    ¬∑ apply Real.log_pos
      norm_cast
      exact aux1 hf dn‚ÇÄ
  let C : ‚Ñù := ((n‚ÇÄ : ‚Ñù) ^ Œ±) / ((n‚ÇÄ : ‚Ñù) ^ Œ± - 1)
  have dc : C = ((n‚ÇÄ : ‚Ñù) ^ Œ±) / ((n‚ÇÄ : ‚Ñù) ^ Œ± - 1) := rfl
  have hC : 0 < C
  ¬∑ rw [dc, ‚Üê this]
    have hn‚ÇÄ := Nat.find_spec hf
    rw [‚Üê dn‚ÇÄ] at hn‚ÇÄ
    apply div_pos
    linarith
    linarith
  suffices : ‚àÄ n : ‚Ñï, f n ‚â§ C * ((n : ‚Ñù) ^ Œ±)
  ¬∑ intro n
    have limit'' : Filter.Tendsto
      (Œª N : ‚Ñï ‚Ü¶ (C ^ (1 / (N : ‚Ñù))) * (n ^ Œ±)) Filter.atTop (nhds (n ^ Œ±))
    ¬∑ have := Filter.Tendsto.mul_const ((n : ‚Ñù) ^ Œ±) (limit1 hC)
      simp only [one_div, one_mul] at this
      simp only [one_div]
      exact this
    have stupid : (0 : ‚Ñù) ‚â§ n := by norm_cast; exact zero_le n
    have aux : ‚àÄ N : ‚Ñï, (f (n)) ^ (N : ‚Ñù) ‚â§ C * ((n ^ Œ±) ^ (N : ‚Ñù))
    ¬∑ intro N
      rw [‚Üê Real.rpow_mul stupid]
      nth_rewrite 2 [mul_comm]
      rw [Real.rpow_mul stupid]
      norm_cast
      rw [‚Üê map_pow]
      specialize this (n ^ N)
      norm_cast
    have aux1 : ‚àÄ N : ‚Ñï, 0 < N ‚Üí f (n) ‚â§ (C ^ (1 / (N : ‚Ñù))) * (n ^ Œ±)
    ¬∑ intros N hN
      have hN‚ÇÅ : N ‚â† 0 := by linarith
      refine le_of_pow_le_pow_left hN‚ÇÅ ?_ ?_
      ¬∑ apply mul_nonneg
        ¬∑ apply le_of_lt
          exact Real.rpow_pos_of_pos hC _
        ¬∑ exact Real.rpow_nonneg stupid _
      ¬∑ rw [mul_pow, ‚Üê Real.rpow_nat_cast,
          ‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_nat_cast,
            ‚Üê Real.rpow_mul (le_of_lt hC), one_div, inv_mul_cancel (by norm_cast), Real.rpow_one]
        exact aux N
    apply ge_of_tendsto limit'' _
    simp only [Filter.eventually_atTop, ge_iff_le]
    use 1
    intros b hb
    exact aux1 b (by linarith)
  intro n
  by_cases h : n = 0
  ¬∑ subst h
    simp only [CharP.cast_eq_zero, map_zero]
    nlinarith [hC, Real.zero_rpow_nonneg Œ±]
  conv_lhs =>
    rw [‚Üê Nat.ofDigits_digits n‚ÇÄ n]
  rw [Nat.ofDigits_eq_sum_mapIdx]
  rw [List.mapIdx_sum_to_finset_sum]
  simp only [Finset.univ_eq_attach, Nat.cast_sum, Nat.cast_mul, Nat.cast_pow]
  apply le_trans (map_sum_le' (n‚ÇÄ.digits n).length _)
  have aux' : 2 ‚â§ n‚ÇÄ := by linarith [aux1 hf dn‚ÇÄ]
  have aux'' : 2 ‚â§ (n‚ÇÄ : ‚Ñù) := by norm_cast
  suffices goal_1 : ‚àë i : Finset.Iio (n‚ÇÄ.digits n).length,
    f (((((n‚ÇÄ.digits n).nthLe i (Finset.mem_Iio.1 i.2))) : ‚Ñö)
      * (n‚ÇÄ : ‚Ñö) ^ (i : ‚Ñï)) = ‚àë i : Finset.Iio (n‚ÇÄ.digits n).length,
        f (((n‚ÇÄ.digits n).nthLe i (Finset.mem_Iio.1 i.2)))
          * (f n‚ÇÄ) ^ (i : ‚Ñï)
  ¬∑ rw [goal_1]
    have coef_ineq : ‚àÄ i : Finset.Iio (n‚ÇÄ.digits n).length,
      f (((n‚ÇÄ.digits n).nthLe i (Finset.mem_Iio.1 i.2))) ‚â§ 1
    ¬∑ intro i
      have : ((n‚ÇÄ.digits n).nthLe i (Finset.mem_Iio.1 i.2)) < n‚ÇÄ
      ¬∑ have aux'' : ((n‚ÇÄ.digits n).nthLe i (Finset.mem_Iio.1 i.2)) ‚àà n‚ÇÄ.digits n
        ¬∑ exact (Nat.digits n‚ÇÄ n).nthLe_mem ‚Üëi (Finset.mem_Iio.mp i.property)
        exact Nat.digits_lt_base aux' aux''
      apply le_of_not_gt
      subst dn‚ÇÄ
      rw [gt_iff_lt]
      exact Nat.find_min hf this
    rw [this]
    have goal1 : ‚àë i : (Finset.Iio (n‚ÇÄ.digits n).length),
      f ((n‚ÇÄ.digits n).nthLe ‚Üëi (Finset.mem_Iio.1 i.2)) * (n‚ÇÄ ^ Œ±) ^ (i : ‚Ñï) ‚â§
        ‚àë i : (Finset.Iio (n‚ÇÄ.digits n).length), ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (i : ‚Ñï)
    ¬∑ simp only [Finset.univ_eq_attach]
      refine GCongr.sum_le_sum ?_
      intro i _
      specialize coef_ineq i
      have goal : ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (i : ‚Ñï) = 1 * ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (i : ‚Ñï) := by simp only [one_mul]
      nth_rewrite 2 [goal]
      refine mul_le_mul_of_nonneg_right coef_ineq ?_
      apply le_of_lt
      apply pow_pos
      exact Real.rpow_pos_of_pos (by linarith) Œ±
    apply le_trans goal1
    have goal2 : (‚àë i : (Finset.Iio (n‚ÇÄ.digits n).length), ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (i : ‚Ñï)) =
    (((n‚ÇÄ : ‚Ñù) ^ (Œ± * ((n‚ÇÄ.digits n).length - 1))) *
      ‚àë i : (Finset.Iio (n‚ÇÄ.digits n).length), ((n‚ÇÄ : ‚Ñù) ^ (-Œ±)) ^ (i : ‚Ñï))
    ¬∑ rw [Finset.mul_sum]
      simp only [Finset.univ_eq_attach, Finset.sum_attach]
      field_simp
      rw [Finset.sum_attach (Finset.Iio (List.length (Nat.digits n‚ÇÄ n)))
        (Œª x ‚Ü¶ (n‚ÇÄ : ‚Ñù) ^ (Œ± * ‚Üë(List.length (Nat.digits n‚ÇÄ (n / n‚ÇÄ))))
          * ((n‚ÇÄ : ‚Ñù) ^ (-Œ±)) ^ (x : ‚Ñï)), Nat.Iio_eq_range]
      nth_rewrite 1 [‚ÜêFinset.sum_flip]
      refine Finset.sum_congr (by field_simp) ?_
      ¬∑ intro x hx
        simp only [Finset.mem_range] at hx
        have hx‚ÇÅ : x ‚â§ List.length (Nat.digits n‚ÇÄ (n / n‚ÇÄ))
        ¬∑ have goal : (List.length (Nat.digits n‚ÇÄ (n / n‚ÇÄ)) + 1) = List.length (Nat.digits n‚ÇÄ n) := by field_simp
          rw [‚Üê goal] at hx
          linarith
        rw [‚Üê Real.rpow_nat_cast]
        push_cast [hx‚ÇÅ]
        rw [@Real.rpow_sub ((n‚ÇÄ : ‚Ñù) ^ Œ±)]
        ¬∑ rw [‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_mul (by linarith), div_eq_mul_inv, Real.rpow_neg, Real.inv_rpow]
          ¬∑ apply le_of_lt
            exact Real.rpow_pos_of_pos (by linarith) Œ±
          ¬∑ linarith
        ¬∑ exact Real.rpow_pos_of_pos (by linarith) Œ±
    rw [goal2]
    have goal3 : ((n‚ÇÄ : ‚Ñù) ^ (Œ± * (((n‚ÇÄ.digits n).length - 1))))
      * (‚àë i : (Finset.Iio (n‚ÇÄ.digits n).length), ((n‚ÇÄ : ‚Ñù) ^ (-Œ±)) ^ (i : ‚Ñï))
        ‚â§ ((n‚ÇÄ : ‚Ñù) ^ (Œ± * (((n‚ÇÄ.digits n).length - 1)))) *
          (‚àë'i : ‚Ñï, (1 / ((n‚ÇÄ : ‚Ñù) ^ Œ±)) ^ i)
    ¬∑ rw [mul_le_mul_left]
      ¬∑ simp only [Finset.univ_eq_attach, one_div, inv_pow]
        have goal : ‚àë i in Finset.attach (Finset.Iio (List.length (Nat.digits n‚ÇÄ n))),
          ((n‚ÇÄ : ‚Ñù) ^ (-Œ±)) ^ (i : ‚Ñï) = ‚àë i in Finset.Iio (List.length (Nat.digits n‚ÇÄ n)),
            (((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ i)‚Åª¬π
        ¬∑ rw [Finset.sum_attach]
          refine Finset.sum_congr rfl ?_
          ¬∑ intro x _
            rw [‚Üê inv_pow, Real.rpow_neg (by linarith)]
        rw [goal]
        refine sum_le_tsum _ ?_ ?_
        ¬∑ intro i _
          apply le_of_lt
          apply inv_pos_of_pos
          apply pow_pos _ i
          apply Real.rpow_pos_of_pos _ Œ±
          linarith
        ¬∑ have aux : (fun i => (((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ i)‚Åª¬π) = (fun i => (((n‚ÇÄ : ‚Ñù) ^ (-Œ±)) ^ i))
          ¬∑ ext i
            rw [Real.rpow_neg (by linarith)]
            field_simp
          rw [aux]
          refine summable_geometric_of_lt_one ?_ ?_
          ¬∑ apply le_of_lt
            refine Real.rpow_pos_of_pos ?_ (-Œ±)
            linarith
          ¬∑ rw [Real.rpow_neg (by linarith)]
            field_simp
            rw [one_div_lt]
            ¬∑ field_simp
              exact Real.one_lt_rpow (by linarith) hŒ±
            ¬∑ exact Real.rpow_pos_of_pos (by linarith) Œ±
            ¬∑ linarith
      ¬∑ exact Real.rpow_pos_of_pos (by linarith) _
    apply le_trans goal3
    have goal4 : ‚àë'i : ‚Ñï, (1 / ((n‚ÇÄ : ‚Ñù) ^ Œ±)) ^ i = C
    ¬∑ rw [tsum_geometric_of_abs_lt_one]
      ¬∑ field_simp
      ¬∑ rw [abs_lt]
        constructor
        ¬∑ suffices goal : 0 < 1 / (n‚ÇÄ : ‚Ñù) ^ Œ±
          ¬∑ linarith
          rw [one_div_pos]
          apply Real.rpow_pos_of_pos _ Œ±
          linarith
        ¬∑ rw [one_div_lt]
          ¬∑ field_simp
            exact Real.one_lt_rpow (by linarith) hŒ±
          ¬∑ apply Real.rpow_pos_of_pos _ Œ±
            linarith
          ¬∑ linarith
    rw [goal4, mul_comm]
    suffices : (n‚ÇÄ : ‚Ñù) ^ (Œ± * (((n‚ÇÄ.digits n).length - 1))) ‚â§ (n : ‚Ñù) ^ Œ±
    ¬∑ nlinarith
    have goal : (n‚ÇÄ : ‚Ñù) ^ (((n‚ÇÄ.digits n).length : ‚Ñù) - 1) ‚â§ (n : ‚Ñù)
    ¬∑ have h' := Nat.base_pow_length_digits_le n‚ÇÄ n aux' h
      have h'' : (n‚ÇÄ : ‚Ñù) ^ ((n‚ÇÄ.digits n).length : ‚Ñù) ‚â§ (n‚ÇÄ : ‚Ñù) * (n : ‚Ñù) := by norm_cast
      have aux'' : 0 < (n‚ÇÄ : ‚Ñù) := by norm_cast; linarith
      have stupid : (n‚ÇÄ : ‚Ñù) ‚â† 0 := by norm_cast; linarith
      have h''' : 0 ‚â§ (n‚ÇÄ : ‚Ñù) ^ (-(1 : ‚Ñù))
      ¬∑ rw [Real.rpow_neg_one]
        have stupid2 : 0 ‚â§ (n‚ÇÄ : ‚Ñù)‚Åª¬π * n‚ÇÄ := by simp [inv_mul_cancel stupid]
        exact nonneg_of_mul_nonneg_left stupid2 aux''
      have h'''' := mul_le_mul_of_nonneg_left h'' h'''
      rw [‚Üê Real.rpow_add aux'' _ _, add_comm, ‚Üêmul_assoc] at h''''
      apply le_trans h''''
      rw [Real.rpow_neg_one, inv_mul_cancel stupid]
      linarith
    rw [mul_comm, Real.rpow_mul (by linarith)]
    have stupid2 : 0 ‚â§ (n‚ÇÄ : ‚Ñù) ^ (((n‚ÇÄ.digits n).length : ‚Ñù) - 1) := by
      apply le_of_lt
      exact @Real.rpow_pos_of_pos (n‚ÇÄ : ‚Ñù) (by linarith) _
    exact Real.rpow_le_rpow stupid2 goal (le_of_lt hŒ±)
  ¬∑ congr
    ext
    rw [f_mul_eq, map_pow]

-- This is lemma 5
lemma lemma5 {n‚ÇÄ : ‚Ñï} {Œ± : ‚Ñù} (hf : ‚àÉ n : ‚Ñï, 1 < f n) (dn‚ÇÄ : n‚ÇÄ = Nat.find hf) (dŒ± : Œ± = Real.log (f n‚ÇÄ) / Real.log n‚ÇÄ) :
    ‚àÄ n : ‚Ñï, (n ^ Œ± : ‚Ñù) ‚â§ f n := by
  have hŒ±‚ÇÄ : 0 < Œ±
  ¬∑ rw [dŒ±]
    apply div_pos
    ¬∑ apply Real.log_pos
      rw [dn‚ÇÄ]
      exact Nat.find_spec hf
    ¬∑ apply Real.log_pos
      norm_cast
      exact aux1 hf dn‚ÇÄ
  have hŒ± : 0 ‚â§ Œ± := by linarith
  have hn‚ÇÄ : 2 ‚â§ n‚ÇÄ := by linarith [aux1 hf dn‚ÇÄ]
  have : f n‚ÇÄ = n‚ÇÄ ^ Œ±
  ¬∑ rw [dŒ±, Real.log_div_log]
    apply Eq.symm
    apply Real.rpow_logb
    ¬∑ norm_cast
      exact lt_trans zero_lt_one (aux1 hf dn‚ÇÄ)
    ¬∑ apply ne_of_gt
      norm_cast
    ¬∑ have hn‚ÇÄ := Nat.find_spec hf
      rw [‚Üêdn‚ÇÄ] at hn‚ÇÄ
      exact lt_trans zero_lt_one hn‚ÇÄ
  let C : ‚Ñù := (1 - (1 - 1 / n‚ÇÄ) ^ Œ±)
  have hC : 0 < C
  ¬∑ dsimp only [C]
    have hn‚ÇÄ1 : (2 : ‚Ñù) ‚â§ (n‚ÇÄ : ‚Ñù) := by norm_cast
    field_simp
    apply Real.rpow_lt_one _ _ hŒ±‚ÇÄ
    ¬∑ apply le_of_lt
      apply div_pos
      ¬∑ linarith
      ¬∑ linarith
    ¬∑ rw [div_lt_one]
      ¬∑ linarith
      ¬∑ linarith
  suffices : ‚àÄ n : ‚Ñï, C * ((n : ‚Ñù) ^ Œ±) ‚â§ f n
  ¬∑ intro n
    have limit'' : Filter.Tendsto
      (Œª N : ‚Ñï ‚Ü¶ (C ^ (1 / (N : ‚Ñù))) * (n ^ Œ±)) Filter.atTop (nhds (n ^ Œ±))
    ¬∑ have := Filter.Tendsto.mul_const ((n : ‚Ñù) ^ Œ±) (limit1 hC)
      simp only [one_div, one_mul] at this
      simp only [one_div]
      exact this
    have stupid : (0 : ‚Ñù) ‚â§ n := by norm_cast; exact zero_le n
    have aux : ‚àÄ N : ‚Ñï, C * ((n ^ Œ±) ^ (N : ‚Ñù)) ‚â§ (f n) ^ (N : ‚Ñù)
    ¬∑ intro N
      rw [‚Üê Real.rpow_mul stupid]
      nth_rewrite 2 [mul_comm]
      rw [Real.rpow_mul stupid]
      norm_cast
      rw [‚Üê map_pow]
      specialize this (n ^ N)
      norm_cast
    have aux1 : ‚àÄ N : ‚Ñï, 0 < N ‚Üí (C ^ (1 / (N : ‚Ñù))) * (n ^ Œ±) ‚â§ f (n)
    ¬∑ intros N hN
      have hN‚ÇÅ : N ‚â† 0 := by linarith
      refine le_of_pow_le_pow_left hN‚ÇÅ ?_ ?_
      ¬∑ exact apply_nonneg f _
      ¬∑ rw [mul_pow, ‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_nat_cast,
          ‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_mul (le_of_lt hC), one_div,
            inv_mul_cancel (by norm_cast), Real.rpow_one]
        exact aux N
    apply le_of_tendsto limit'' _
    simp only [Filter.eventually_atTop, ge_iff_le]
    use 1
    intros b hb
    exact aux1 b (by linarith)
  intros n
  by_cases hn : n = 0
  ¬∑ subst hn
    simp only [CharP.cast_eq_zero, map_zero]
    rw [Real.zero_rpow]
    ¬∑ rw [mul_zero]
    linarith
  have length_lt_one : 1 ‚â§ (n‚ÇÄ.digits n).length
  ¬∑ by_contra goal
    simp only [not_le, Nat.lt_one_iff, List.length_eq_zero, Nat.digits_eq_nil_iff_eq_zero] at goal
    contradiction
  have h‚ÇÅ : f ((n‚ÇÄ : ‚Ñö) ^ ((n‚ÇÄ.digits n).length))
    - f (((n‚ÇÄ : ‚Ñö) ^ ((n‚ÇÄ.digits n).length)) - n) ‚â§ f n
  ¬∑ have goal := abs_sub_map_le_sub f ((n‚ÇÄ : ‚Ñö) ^ ((n‚ÇÄ.digits n).length)) (((n‚ÇÄ : ‚Ñö) ^ ((n‚ÇÄ.digits n).length)) - n)
    simp only [map_pow, sub_sub_cancel] at goal
    apply le_trans _ goal
    rw [map_pow]
    exact le_abs_self _
  apply le_trans' h‚ÇÅ
  rw [map_pow, this]
  have h := lemma4 hf dn‚ÇÄ dŒ±
  specialize h ((n‚ÇÄ ^ ((n‚ÇÄ.digits n).length)) - n)
  have hn‚ÇÅ : n ‚â§ n‚ÇÄ ^ (n‚ÇÄ.digits n).length := by linarith [@Nat.lt_base_pow_length_digits n‚ÇÄ n hn‚ÇÄ]
  have h‚ÇÇ : ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (n‚ÇÄ.digits n).length - ((n‚ÇÄ ^ (n‚ÇÄ.digits n).length - n) : ‚Ñö) ^ Œ± ‚â§
  ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (n‚ÇÄ.digits n).length - f ((n‚ÇÄ : ‚Ñö) ^ (n‚ÇÄ.digits n).length - (n : ‚Ñö))
  ¬∑ rw [sub_le_sub_iff_left]
    simp only [Rat.cast_sub, Rat.cast_pow, Rat.cast_coe_nat]
    push_cast [hn‚ÇÅ] at h
    exact h
  apply le_trans' h‚ÇÇ
  simp only [Rat.cast_sub, Rat.cast_pow, Rat.cast_coe_nat]
  have h‚ÇÉ : ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (n‚ÇÄ.digits n).length - ((n‚ÇÄ : ‚Ñù) ^ (n‚ÇÄ.digits n).length - (n‚ÇÄ : ‚Ñù) ^ ((n‚ÇÄ.digits n).length - 1)) ^ Œ± ‚â§
    ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (n‚ÇÄ.digits n).length - ((n‚ÇÄ : ‚Ñù) ^ (n‚ÇÄ.digits n).length - (n : ‚Ñù)) ^ Œ±
  ¬∑ rw [sub_le_sub_iff_left]
    apply Real.rpow_le_rpow _ _ hŒ±
    ¬∑ norm_cast
      linarith
    ¬∑ suffices goal : (n‚ÇÄ : ‚Ñù) ^ List.length (Nat.digits n‚ÇÄ n)  ‚â§
                        (n‚ÇÄ : ‚Ñù) ^ List.length (Nat.digits n‚ÇÄ n) + ((n : ‚Ñù) - (n‚ÇÄ : ‚Ñù) ^ (List.length (Nat.digits n‚ÇÄ n) - 1))
      ¬∑ linarith
      simp only [le_add_iff_nonneg_right, sub_nonneg]
      norm_cast
      rw [‚Üê Nat.pow_div length_lt_one]
      ¬∑ simp only [pow_one]
        exact Nat.div_le_of_le_mul (Nat.base_pow_length_digits_le n‚ÇÄ n hn‚ÇÄ hn)
      linarith
  apply le_trans' h‚ÇÉ
  have h‚ÇÑ : ((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (n‚ÇÄ.digits n).length -
    ((n‚ÇÄ : ‚Ñù) ^ (n‚ÇÄ.digits n).length - (n‚ÇÄ : ‚Ñù) ^ ((n‚ÇÄ.digits n).length - 1)) ^ Œ±
      = (((n‚ÇÄ : ‚Ñù) ^ Œ±) ^ (n‚ÇÄ.digits n).length) * (1 - (1 - 1 / n‚ÇÄ) ^ Œ±)
  ¬∑ rw [mul_sub, mul_one, sub_right_inj, ‚Üê Real.rpow_nat_cast,
      ‚Üê Real.rpow_nat_cast, ‚Üê Real.rpow_nat_cast, ‚ÜêReal.rpow_mul]
    ¬∑ nth_rewrite 2 [mul_comm]
      rw [Real.rpow_mul]
      ¬∑ rw [‚ÜêReal.mul_rpow]
        ¬∑ rw [mul_sub, mul_one, Nat.cast_sub length_lt_one, Real.rpow_sub]
          ¬∑ ring_nf
            simp only [algebraMap.coe_one, Real.rpow_one]
          norm_cast
          linarith [aux1 hf dn‚ÇÄ]
        ¬∑ norm_cast
          linarith [Nat.one_le_pow ((n‚ÇÄ.digits n).length)
            n‚ÇÄ (by linarith [aux1 hf dn‚ÇÄ])]
        ¬∑ simp only [sub_nonneg]
          rw [one_div_le]
          ¬∑ simp only [div_self, Ne.def, one_ne_zero, not_false_iff, Nat.one_le_cast]
            linarith [aux1 hf dn‚ÇÄ]
          ¬∑ norm_cast
            linarith [aux1 hf dn‚ÇÄ]
          ¬∑ linarith
      norm_cast
      exact Nat.zero_le n‚ÇÄ
    norm_cast
    exact Nat.zero_le n‚ÇÄ
  rw [h‚ÇÑ]
  nth_rewrite 2 [mul_comm]
  apply mul_le_mul_of_nonneg_left _ (le_of_lt hC)
  suffices goal : (n : ‚Ñù )^ Œ± ‚â§ ((n‚ÇÄ : ‚Ñù) ^ (n‚ÇÄ.digits n).length) ^ Œ±
  ¬∑ rw [‚Üê Real.rpow_nat_cast] at goal ‚ä¢
    rw [‚Üê Real.rpow_mul]
    ¬∑ rw [mul_comm, Real.rpow_mul]
      ¬∑ exact goal
      norm_cast
      exact Nat.zero_le n‚ÇÄ
    norm_cast
    exact Nat.zero_le n‚ÇÄ
  apply Real.rpow_le_rpow
  ¬∑ norm_cast
    exact Nat.zero_le n
  ¬∑ norm_cast
  ¬∑ exact hŒ±

lemma archimedean_case (hf : ¬¨ Nonarchimedean f) : MulRingNorm.equiv f MulRingNorm.Real :=
by
  rw [‚Üê Nonarchimedean_iff_natNorm_bounded] at hf
  simp only [not_forall, not_le] at hf
  let n‚ÇÄ : ‚Ñï := Nat.find hf
  have dn‚ÇÄ : n‚ÇÄ = Nat.find hf := rfl
  let Œ± : ‚Ñù := Real.log (f n‚ÇÄ) / Real.log n‚ÇÄ
  have hŒ± : Œ± =  Real.log (f n‚ÇÄ) / Real.log n‚ÇÄ := rfl
  have h‚ÇÉ : ‚àÄ (n : ‚Ñï), f (n : ‚Ñö) = (n : ‚Ñù) ^ Œ±
  ¬∑ intro n
    linarith [lemma5 hf dn‚ÇÄ hŒ± n, lemma4 hf dn‚ÇÄ hŒ± n]
  have h‚ÇÑ : ‚àÄ (n : ‚Ñï), f (n : ‚Ñö) = |(n : ‚Ñù)| ^ Œ±
  ¬∑ intro n
    rw [Nat.abs_cast n]
    exact h‚ÇÉ n
  apply MulRingNorm.equiv_symm _
  refine ‚ü®Œ±, ?_, ?_‚ü©
  ¬∑ rw [hŒ±]
    apply div_pos
    ¬∑ apply Real.log_pos
      exact Nat.find_spec hf
    ¬∑ apply Real.log_pos
      norm_cast
      exact aux1 hf dn‚ÇÄ
  ¬∑ ext x
    rw [MulRingNorm_eq_abs, ‚Üê Rat.num_div_den x]
    norm_cast
    rw [‚Üê Rat.coe_int_div_eq_divInt, abs_div]
    push_cast
    rw [map_div‚ÇÄ]
    ¬∑ rw [Real.div_rpow]
      ¬∑ congr
        ¬∑ cases' x.num with b b
          ¬∑ simp only [Int.ofNat_eq_coe, Int.cast_ofNat]
            exact (h‚ÇÑ b).symm
          ¬∑ simp only [Int.cast_negSucc, Nat.cast_add, Nat.cast_one, neg_add_rev]
            rw [‚Üê abs_neg, ‚Üê map_neg_eq_map]
            simp only [neg_add_rev, neg_neg]
            norm_cast
            exact (h‚ÇÉ (b + 1)).symm
        ¬∑ exact (h‚ÇÑ x.den).symm
      ¬∑ exact norm_nonneg ((x.num) : ‚Ñù)
      ¬∑ exact norm_nonneg ((x.den) : ‚Ñù)

end archimedean

/-- Ostrowski's Theorem -/
theorem RatRingNorm_padic_or_real {f : MulRingNorm ‚Ñö} (hf_nontriv : f ‚â† 1) :
  (MulRingNorm.equiv f MulRingNorm.Real) ‚à®
  ‚àÉ (p : ‚Ñï) (hp : Fact (Nat.Prime p)), MulRingNorm.equiv f (@MulRingNorm.padic p hp) :=
by
    by_cases bdd : ‚àÄ z : ‚Ñï, f z ‚â§ 1
    ¬∑ right /- p-adic case -/
      rw [Nonarchimedean_iff_natNorm_bounded] at bdd
      exact f_equiv_padic bdd hf_nontriv
    ¬∑ left
      rw [Nonarchimedean_iff_natNorm_bounded] at bdd
      exact archimedean_case bdd /- Euclidean case -/
